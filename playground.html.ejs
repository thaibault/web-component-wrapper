<!doctype html>
<%_ /*
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/ _%>
<html lang="en">
    <!--region head-->
    <head>
        <meta charset="utf-8">
        <!--Prevent browser caching-->
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">
        <meta http-equiv="pragma" content="no-cache">
        <title>playground</title>
        <%- include('polyfill.html') %>
        <!--region script-->
        <script>
            window.onload = function() {
                const Tools = webComponentWrapper.clientnode.Tools

                // region prepare web-component
                const Web = webComponentWrapper.index.Web

                Web.content =
                    Tools.maximalSupportedInternetExplorerVersion === 0 ?
                        ('<div class="wrapper">' +
                            "Example Properties\${id ? (' for ' + id) : ''}:" +
                            '<ul>' +
                                '${Object.keys(self.externalProperties)' +
                                    '.map(function(name) {' +
                                        'return (' +
                                            "'<li>' +" +
                                                'name +' +
                                                "': ' +" +
                                                'Tools.represent(self.externalProperties[name]) +' +
                                            "'</li>'" +
                                        ')' +
                                    '})' +
                                    ".join('')" +
                                '}' +
                            '</ul>' +
                            '<slot>Fallback Slot content</slot>' +
                        '</div>') :
                        Web.content = (
                            '<div class="wrapper">' +
                                '<slot>Fallback Slot content</slot>' +
                            '</div>'
                        )
                Web.propertiesToReflectAsAttributes.push('exampleBoolean')

                const propertyTypes = {
                    children: 'object',
                    exampleBoolean: 'boolean',
                    exampleFunction: 'function',
                    exampleJson: 'json',
                    exampleNumber: 'number',
                    exampleObject: 'object',
                    exampleString: 'string',
                    exampleRenderPropFunction: 'function',
                    id: 'string'
                }
                for (let name in propertyTypes)
                    Web.propertyTypes[name] = propertyTypes[name]

                Web.observedAttributes = Object.keys(Web.propertyTypes)
                    .map(function(name) {
                        return Tools.stringCamelCaseToDelimited(name)
                    })
                Web.shadowDOM =
                    Tools.maximalSupportedInternetExplorerVersion === 0 ?
                        {mode: 'closed'} :
                        null

                webComponentWrapper.index.webAPI.register('my-web')
                // endregion

                const oneWeb = document.querySelector('#web-1')

                const twoWeb = document.querySelector('#web-2')
                twoWeb.exampleBoolean = true

                // region prepare react-web-component
                const ReactWeb = webComponentWrapper.index.ReactWeb
                const createElement = ReactWeb.react.createElement

                ReactWeb.content = function(props) {
                    return createElement(
                        'div',
                        {className: 'wrapper'},
                        'Example Properties',
                        props.id ? (' for ' + props.id) : '',
                        ':',
                        createElement(
                            'ul',
                            null,
                            Object.keys(props)
                                .filter(function(name) {
                                    return !(
                                        ['children', 'ref'].includes(name) ||
                                        name.endsWith('Function')
                                    )
                                })
                                .map(function(name, index) {
                                    return createElement(
                                        'li',
                                        {key: index},
                                        [
                                            createElement(
                                                'span', {key: 0}, name + ': '
                                            ),
                                            props.exampleRenderPropFunction ?
                                                props.exampleRenderPropFunction(
                                                    Tools.represent(props[name]),
                                                    1
                                                ) :
                                                Tools.represent(props[name])
                                        ]
                                    )
                                })
                        ),
                        props.children
                    )
                }
                ReactWeb.eventToPropertyMapping = null
                ReactWeb.propertiesToReflectAsAttributes =
                    Web.propertiesToReflectAsAttributes
                ReactWeb.propertyTypes = Web.propertyTypes
                ReactWeb.observedAttributes = Web.observedAttributes
                ReactWeb.shadowDOM = Web.shadowDOM

                webComponentWrapper.index.reactWebAPI.register('my-react-web')
                // endregion

                const oneReactWeb = document.querySelector('#web-react-1')

                const twoReactWeb = document.querySelector('#web-react-2')
                twoReactWeb.exampleBoolean = true

            }
        </script>
        <!--endregion-->
    </head>
    <!--endregion-->
    <body>

        <my-web
            id="web-1"

            example-boolean
            example-function="console.log(2)"
            example-json='{"key": false, "key2": null, "key3": {"key": 2}, "key4": "value"}'
            example-number="4"
            example-object="{key: false, key2: null, key3: {key: 2}, key4: 'value'}"
            example-string="value"

            bind-on-render="console.log('Render:', this)"
        >
            <h1>Slotted Content</h1>

            <p>Lorem ipsum...</p>

            <input
                data-bind-property-disabled="false"
                data-bind-attribute-class="'class-' + exampleNumber"
                bind-property-placeholder="'Binded number: ' + exampleNumber"
                bind-on-input="event.target.title = baseWeb.self._name + ': ' + event.target.value"
            />

            <my-web
                id="nested-web-1"
                bind-on-render="console.log('Render:', this, 'by', baseWeb.self._name)"
            ></my-web>
        </my-web>

        <hr/>

        <my-web id="web-2">
            <h1>Slotted Content</h1>
            <p>Lorem ipsum...</p>
        </my-web>

        <hr/>

        <my-react-web
            id="web-react-1"
            example-boolean
            example-function="console.log(2)"
            example-json='{
                "key": false, "key2": null, "key3": {"key": 2}, "key4": "value"
            }'
            example-number="4"
            example-object="{
                key: false, key2: null, key3: {key: 2}, key4: 'value'
            }"
            example-string="value"
        >
            <h1>Slotted Content</h1>
            <p>Lorem ipsum...</p>
        </my-react-web>

        <hr/>

        <my-react-web id="web-react-2">
            <h1
                bind-attribute-class="'class-' + parent.self._name"
                id="simple-id"
            >
                Slotted Content
            </h1>

            <p bind-attribute-id="id">Lorem ipsum...</p>

            <my-react-web
                bind-property-example-number="12" id="web-react-2-sub"
            >
                <span
                    bind-property-text-content="options"
                    data-bind-property-key="parameters[1]"
                    slot="exampleRenderPropFunction"
                    bind-property-style="{border: '1px solid red'}"
                    title="wrapped"
                ></span>

                <div slot="default">
                    <h2
                        bind-attribute-class="'class-' + String(scope.exampleNumber)"
                        bind-property-text-content="'test-' + id"
                    ></h2>

                    <input
                        bind-on-change="parent.scope.value = event.target.value; root.render()"
                        default-value="test"
                    />

                    <div>
                        Input: "<span bind-property-text-content="parent.scope.value || 'placeholder'"></span>"
                    </div>
                </div>
            </my-react-web>
        </my-react-web>

    </body>
<html>
